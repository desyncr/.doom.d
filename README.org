#+TITLE: Emacs doom configuration
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes :cache yes :results silent
#+STARTUP: inlineimages

#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
[[./splash/doom-emacs-bw-light.svg]]

* General
Place your private configuration here! Remember, you do not need to run ~doom sync~ after modifying this file!

Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
(setq user-full-name "DC*"
      user-mail-address "des@riseup.net")
#+end_src

Doom exposes five (optional) variables for controlling fonts in Doom:

- ~doom-font~ -- the primary font to use
- ~doom-variable-pitch-font~ -- a non-monospace font (where applicable)
- ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for presentations or streaming.
- ~doom-unicode-font~ -- for unicode glyphs
- ~doom-serif-font~ -- for the ~fixed-pitch-serif~ face

See ~C-h v doom-font~ for documentation and more examples of what they accept. For example:

If you or Emacs can't find your font, use ~M-x describe-font~ to look them up, ~M-x eval-region~ to execute elisp code, and ~M-x doom/reload-font~ to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and available. You can either set ~doom-theme~ or manually load a theme with the ~load-theme~ function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-nord-light)
#+end_src

This determines the style of line numbers in effect. If set to ~nil~, line
numbers are disabled. For relative line numbers, set this to ~relative~.

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

If you use ~org~ and don't want your org files in the default location below, change ~org-directory~. It must be set before org loads!
#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src

Whenever you reconfigure a package, make sure to wrap your config in an

  #+begin_example
  (after! PACKAGE
  (setq x y))
  #+end_example

The exceptions to this rule:

  - Setting file/directory variables (like ~org-directory~)
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see ~C-h v VARIABLE~ to look up their documentation).
  - Setting doom variables (which start with ~doom-~ or ~+~).

Here are some additional functions/macros that will help you configure Doom.

- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~, relative to
  this file. Emacs searches the ~load-path~ when you load packages with
  ~require~ or ~use-package~.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press ~K~ (non-evil users must press ~C-c c k~).
This will open documentation for it, including demos of how they are used.
Alternatively, use ~C-h o~ to look up a symbol (functions, variables, faces, etc).

You can also try ~gd~ (or ~C-c c d~) to jump to their definition and see how they are implemented.

* Fonts
I'm using the following fonts at the moment. Nothing in particular about these fonts, only that they support glyphs and ligatures.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 12)) ;; Fira Code,  :weight 'medium
(setq doom-unicode-font (font-spec :family "JetBrainsMono Nerd Font" :size 12))
#+end_src

Instructions to install ~Fira Code~ can be found [[https://github.com/tonsky/FiraCode/wiki/Installing][here]].

Run the following command to install ~JetBrains Mono Nerd Font~:

#+begin_example
brew install --cask font-jetbrains-mono-nerd-font
#+end_example

You can install other fonts with a similar command following [[https://github.com/ryanoasis/nerd-fonts#option-4-homebrew-fonts][these]] instructions. See comment [[https://www.reddit.com/r/DoomEmacs/comments/qqqbon/comment/hrlhkzn/?utm_source=share&utm_medium=web2x&context=3][here]] and more info can be found [[https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/JetBrainsMono/font-info.md][here]] as well.

* Packages
To install a package with Doom you must declare them here and run ~doom sync~ on the command line, then restart Emacs for the changes to take effect -- or use ~M-x doom/reload~.

To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:

#+begin_example
    (package! some-package)
#+end_example

To install a package directly from a remote git repo, you must specify a ~:recipe~. You'll find documentation on what ~:recipe~ accepts here: https://github.com/radian-software/straight.el#the-recipe-format

    #+begin_example
    (package! another-package
    :recipe (:host github :repo "username/repo"))
    #+end_example

If the package you are trying to install does not contain a PACKAGENAME.el file, or is located in a subdirectory of the repo, you'll need to specify ~:files~ in the ~:recipe~:

    #+begin_example
    (package! this-package
    :recipe (:host github :repo "username/repo"
    :files ("some-file.el" "src/lisp/*.el")))
    #+end_example

If you'd like to disable a package included with Doom, you can do so here with the ~:disable~ property:

    #+begin_example
    (package! builtin-package :disable t)
    #+end_example

You can override the recipe of a built in package without having to specify all the properties for ~:recipe~. These will inherit the rest of its recipe from Doom or MELPA/ELPA/Emacsmirror:

    #+begin_example
    (package! builtin-package :recipe (:nonrecursive t))
    (package! builtin-package-2 :recipe (:repo "myfork/package"))
    #+end_example

Specify a ~:branch~ to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't ~master~ (which our package manager can't deal with; see radian-software/straight.el#279)

    #+begin_example
    (package! builtin-package :recipe (:branch "develop"))
    #+end_example

Use ~:pin~ to specify a particular commit to install.

    #+begin_example
    (package! builtin-package :pin "1a2b3c4d5e")
    #+end_example


Doom's packages are pinned to a specific commit and updated from release to release. The ~unpin!~ macro allows you to unpin single packages...

    #+begin_example
    (unpin! pinned-package)
    #+end_example

...or multiple packages

    #+begin_example
    (unpin! pinned-package another-pinned-package)
    #+end_example

 ...Or *all* packages (NOT RECOMMENDED; will likely break things)

    #+begin_example
    (unpin! t)
    #+end_example

#+begin_src emacs-lisp :tangle packages.el
(package! blamer)
(package! deadgrep)
(package! treemacs-projectile)
(package! super-save)
(package! better-jumper)
(package! centered-cursor-mode)
(package! vertico-posframe)
(package! rainbow-delimiters)
(package! org-modern) ; Modern org UI
(package! evil-snipe)
(package! devdocs)
#+end_src

* Fancy splash image
Configure Doom Emacs Splash image. Taken from [[https://gitlab.com/zzamboni/dot-doom/-/tree/master/splash][zzamboni/dot-doom]]. Alternative splash images can be found at [[https://github.com/jeetelongname/doom-banners][jeetelongname/doom-banners]] repository.

#+begin_src emacs-lisp
(setq fancy-splash-image "~/.doom.d/splash/doom-emacs-bw-light.svg")
#+end_src

You can have Emacs display image inline via ~#+STARTUP: inlineimages~. See the top of this document for an example.

* Custom packages
This section contains custom packages and package configurations. Most of the configurations here are copy/pasted from the package repositories README.md or other sources. I added attribution/source wherever possible.
** blamer
This package adds a blame legend besides the current line in version-controlled files.

It's somewhat handy but at the same time I can't see how I can jump to the diff for that blame, so I can't make it fully useful to me.
Another small annoyance I found is that when I switched to a literate configuration format (i.e. use org files) the blamer shows up.
The problem is with org files you got line-wrap. Since I use splits (treemacs | vsplit | vsplit) the blamer packages causes text reflow with the line wrap.

#+begin_src emacs-lisp
(use-package blamer
  :bind (("s-i" . blamer-show-commit-info))
  :defer 20
  :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70)
    (blamer-max-commit-message-length 100)
  :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                    :background nil
                    :italic t)))
  :config
  (global-blamer-mode 0))
#+end_src

TODO: Find out how to jump to the blame commit.

** better-jumper
Better jump (remember jump list).

#+begin_src emacs-lisp
(use-package better-jumper
  :ensure t
  :config
  (better-jumper-mode +1))
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "C-o") 'better-jumper-jump-backward)
  (define-key evil-motion-state-map (kbd "C-i") 'better-jumper-jump-forward))
#+end_src

Use with C-o to jump out of the last item and C-i to jump in to the next item in the list.

** super-save
Automatically save open buffers on certain events.

Package repository: [[https://github.com/bbatsov/super-save][here]].

#+begin_src emacs-lisp
(use-package super-save
  :ensure t
  :config
  (super-save-mode +1))
#+end_src

* Custom keybindings
- Open dashboard

#+begin_src emacs-lisp
(map! :leader :desc "Open Dashboard" "d" #'+doom-dashboard/open)
#+end_src

- Comment or uncomment region with M-/
#+begin_src emacs-lisp
(map! :ne "M-/" #'comment-or-uncomment-region)
#+end_src

- Switch to buffer
#+begin_src emacs-lisp
(map! "s-b" #'ido-switch-buffer)
#+end_src

- Toggle treemacs

Toggle treemacs with M-t (tree) and M-§ (key left hand side of the number 1 and above the tab key).

#+begin_src emacs-lisp
(map! "s-t" #'+treemacs/toggle)
#+end_src

- Save buffer

Quickly save buffer with M-s (save).

#+begin_src emacs-lisp
(map! "s-s" #'save-buffer)
#+end_src

- Search project

Search project's contents with M-f (find). Replaces Go To Line.

#+begin_src emacs-lisp
(map! "s-f" #'+default/search-project)
#+end_src

- Find file

M-p: find file in project, also SPC SPC.

#+begin_src emacs-lisp
(map! "s-p" #'projectile-find-file)
#+end_src
* Coding
** flycheck
Most classes/php files I'm working with are quite large and cause a large number of errors to popup. I'm topping up the error threshold to avoid a warning during start up:

#+begin_src emacs-lisp
(setq flycheck-checker-error-threshold 10000)
#+end_src

Most projects I work with are somewhat following the PSR12 standard, so let's configure flycheck to respect that:
#+begin_src emacs-lisp
(setq flycheck-phpcs-standard "psr12")
#+end_src

** lsp
I'm working on a large series of interrelated projects which work well under the same directory structure (code/{project1, project2, project3}).
The downside is that this causes LSP to complain about the large number of files and file descriptors it uses.

So I'm forced to top up the default threshold via thiw variable:

#+begin_src emacs-lisp
(setq lsp-file-watch-threshold 10000)
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]vendor\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]misc-dev-contrib\\~")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]misc\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]push-notifications\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]main\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]kantox-sdk-guzzle5\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]ecadmin\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]docs-api-swagger\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]docs-network-api-swagger\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]dbmigration\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]admin-v2\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]static\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]sandbox\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]rtb\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]management\'")
  ;; or
  (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\.my-files\\'"))
  #+end_src


 #+begin_src emacs-lisp
(setq
 lsp-idle-delay 0.1
 company-minimum-prefix-length 2
 company-idle-delay 0.0
 company-tooltip-minimum-width 50
 company-tooltip-maximum-width 50
 )
 #+end_src

** rainbow-delimiters-mode
Rainbow coloring for brackets and other delimiters in prog mode. Package: [[https://elpa.nongnu.org/nongnu/rainbow-delimiters.html][nongnu elpa]].

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** yasnippets
I'm using [[https://github.com/joaotavora/yasnippet][Yasnippets]] package to manage code snippets. As per the instructions:

#+begin_src emacs-lisp :tangle no
(use-package yasnippet
  :config (yas-global-mode 1))
#+end_src

*Warning*: I had to disable (:tangle no) yas-global-mode since it interfered with LSP/company-mode. Throwing errors trying to display completions on PHP-mode.
With this settings disabled now both company mode and yas-snippets work just fine.

Additionally I'm installing pre-defined snippets with the package [[The above instructions also setup the package][Yasnippets-snippets]]:

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

(require 'yasnippet-snippets)
#+end_src

As per the [[package-refresh-contents][instructions]] I'm configuring melpa archive repositories. After that the command ~package-refresh-contents~ must be ran to be able to pull updates from it:

- ~M-x package-refresh-contents~
- ~M-x package-install yasnippet-snippets~

In the code above I'm actually requiring the package via lisp, which should install and load it.

There's an additional package with extra snippets maintained by the Doom Emacs' github organization: [[https://github.com/doomemacs/snippets][doomemacs/snippets]]

I'm also imported several snippets from [[https://github.com/cartolari/yasnippet-vim-snippets][cartolari/yasnippet-vim-snippets]] repository, primarily [[https://github.com/cartolari/yasnippet-vim-snippets/tree/master/snippets/php-mode][php-mode]].

Tip: Use M-x yas-describe-tables to see the list of snippets and edit them.
** evil-snipe
This package provides a way to quickly navigate through a buffer with ~s~ and ~S~ for forward and backward 2-character search.

Once it finds a 2-character match it jumps to it. You can jump to further matches with ~;~ (or ~,~ to jump backwards).

#+begin_src emacs-lisp
(use-package evil-snipe
  :defer t
  :config
  (setq evil-snipe-scope 'visible)
  (setq evil-snipe-repeat-scope 'buffer)
  (setq evil-snipe-spillover-scope 'whole-buffer)
)
#+end_src

The above code snippet configures evil-snipe to use a "fallback" scope when the default scope doesn't find a match. The default scope is bind to the current line, the "spillover" (or "fallback") scope is useful when configured with a larger scope, in this case 'whole-buffer.

The full list of scopes are:

|---------------+----------------------------------------------------------------|
| Scope         | Description                                                    |
|               |                                                                |
|---------------+----------------------------------------------------------------|
| line          | Rest of the current line after cursor                          |
| buffer        | Rest of the buffer after cursor                                |
| visible       | Rest of the _visible_ buffer after cursor                        |
| whole-line    | Same as ~line~ but highlights on either side of cursor         |
| whole-buffer  | Same as ~buffer~ but highlights all matches in buffer          |
| whole-visible | Same as ~visible~ but highlights all _visible_ matches in buffer |
|               |                                                                |
|---------------+----------------------------------------------------------------|
** devdocs
This package somewhat expands on Doom Emacs' [[https://docs.doomemacs.org/latest/modules/tools/lookup/][lookup]] functionality.

The ~SPC s o~ opens up documentation for the current symbol under cursor in the default browser. I didn't like to require a browser to navigate documentation as I don't want to leave the code I'm working on to check on something.

Alternatively it can be configured to use ~eww~ instead. Which is way better. But the problem is devdocs require javascript to work correctly (it can work offline, but still requires a browser and javascript enabled).

This package uses devdocs generated documentation (downloads it) and queries it offline, showing it on a separate window/buffer.

#+begin_src emacs-lisp
(use-package devdocs
  :ensure t)

(global-set-key (kbd "C-h D") 'devdocs-lookup)
#+end_src

Use ~C-h D~ or ~SPC h D~ to search for the symbol under cursor. Note: The documentation will not be displayed right away, you'll need to press RET on the given symbol.
* Version control
** Git
Configure user and email address:
#+begin_src bash :tangle no
git config --local user.email "des@riseup.net"
git config --local user.name "DC*"
#+end_src

This configuration applies to the repository the command is running on (--local). You can apply global (i.e. to all repositories) replacing --local with the flag --global.

* Project management
** projectile
#+begin_src emacs-lisp
(after! projectile
   (setq
        projectile-project-search-path '("~/sys-vagrant/code/")
   )
)

#+end_src

** treemacs
Enable treemacs and never move to treemacs with other-window:

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :config
  (setq treemacs-is-never-other-window t))
#+end_src

Ensure treemacs-projectile integration:

#+begin_src emacs-lisp
(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)
#+end_src

Ensure treemacs-magit integration:

#+begin_src emacs-lisp
(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

#+end_src

Ensure treemacs-persp integration:

#+begin_src emacs-lisp
(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+end_src

* Files
- Allow deleting files in OSX. Source: [[https://emacs.stackexchange.com/a/15012][Emacs' StackExchange]]

#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
(setq trash-directory "~/.Trash")
#+end_src

*Also required*: Go to Settings -> Security & Privacy -> Privacy -> Automation and Allow Emacs -> Finder. Source: [[https://ajar.freshdesk.com/support/solutions/articles/26000045119-install-error-not-authorized-to-send-apple-events-to-system-events-][freshdesk.com]]

- Archive entries in sub-directory. Source: [[https://emacs.stackexchange.com/a/25020][Emacs' StackExchange]]

#+begin_src emacs-lisp
(setq org-archive-location (concat "archive/archive-"
                                   (format-time-string "%Y%m" (current-time)) ".org_archive::"))
#+end_src

* Org/Agenda
** org-modern
Modern look and feel for Org files. Package: [[https://github.com/minad/org-modern][org-modern]].

This package in [[https://github.com/doomemacs/doomemacs/issues/6434#issuecomment-1146242143][under review]] for inclusion into Doom Emacs.

#+begin_src emacs-lisp
(use-package org-modern
  :config
    ;; Add frame borders and window dividers
    (modify-all-frames-parameters
    '((right-divider-width . 5)
    (internal-border-width . 5)))

    (dolist (face '(window-divider
                    window-divider-first-pixel
                    window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
    (set-face-background 'fringe (face-attribute 'default :background))

    (setq
    ;; Edit settings
    org-auto-align-tags nil
    org-tags-column 0
    org-catch-invisible-edits 'show-and-error
    org-special-ctrl-a/e t
    org-insert-heading-respect-content t

    ;; Org styling, hide markup etc.
    org-hide-emphasis-markers t
    org-pretty-entities t
    org-ellipsis "…"

    ;; Agenda styling
    org-agenda-tags-column 0
    org-agenda-block-separator ?─
    org-agenda-time-grid
    '((daily today require-timed)
    (800 1000 1200 1400 1600 1800 2000)
    " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
    org-agenda-current-time-string
    "⭠ now ─────────────────────────────────────────────────")

    (global-org-modern-mode)
  )
#+end_src
** org-log-repeat
Disable log lines on repeat tasks.

#+begin_src emacs-lisp
(use-package org
  :config
    (setq org-log-repeat nil)
)
#+end_src

* UI
** doom-modeline-word-count
Add word count to status/modeline. Useful for org documents and writing in general.

#+begin_src emacs-lisp
(setq doom-modeline-enable-word-count t)
#+end_src

** git-gutter
Show git gutter for unsaved changes, source: [[https://github.com/doomemacs/doomemacs/issues/2377#issuecomment-576117218][github comment]].

#+begin_src emacs-lisp
(after! git-gutter
  (setq git-gutter:update-interval 0.5))
#+end_src

** center-isearch
source: [[https://www.reddit.com/r/emacs/comments/6ewd0h/comment/dieb3dc/?utm_source=share&utm_medium=web2x&context=3][reddit comment]].

#+begin_src emacs-lisp
(advice-add 'evil-ex-search-next :after
            (lambda (&rest x) (evil-scroll-line-to-center (line-number-at-pos))))
(advice-add 'evil-ex-search-previous :after
            (lambda (&rest x) (evil-scroll-line-to-center (line-number-at-pos))))
#+end_src

** centered-cursor-mode
source: https://github.com/andre-r/centered-cursor-mode.el

#+begin_src emacs-lisp
(use-package centered-cursor-mode
  :demand
  :config
  ;; Optional, enables centered-cursor-mode in all buffers.
  (global-centered-cursor-mode))
#+end_src

** vertico-posframe
Ctrl+P / command launcher-like for M-x.

#+begin_src emacs-lisp
(use-package vertico-posframe
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-border-width 8
        vertico-posframe-width 120
        vertico-posframe-height 20
        vertico-posframe-min-height 10
        vertico-posframe-parameters
        '((left-fringe . 5)
          (right-fringe . 5)))
  )
#+end_src
