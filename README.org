#+TITLE: Emacs doom configuration
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no
#+STARTUP: inlineimages

[[~/.doom.d/splash/doom-emacs-bw-light.svg]]

* General
Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!

Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
(setq user-full-name "DC*"
      user-mail-address "des@riseup.net")
#+end_src

Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they accept. For example:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'medium))
#+end_src

Installing Fira Code: https://github.com/tonsky/FiraCode/wiki/Installing

If you or Emacs can't find your font, use 'M-x describe-font' to look them up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-nord-light)
#+end_src

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src

Whenever you reconfigure a package, make sure to wrap your config in an
  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces, etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

* Fancy splash image

#+begin_src emacs-lisp
(setq fancy-splash-image "~/.doom.d/splash/doom-emacs-bw-light.svg")
#+end_src
* Coding
** Snippets

I'm using [[https://github.com/joaotavora/yasnippet][Yasnippets]] package to manage code snippets. As per the instructions:

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config (yas-global-mode 1))
#+end_src

Additionally I'm installing pre-defined snippets with the package [[The above instructions also setup the package][Yasnippets-snippets]]:

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

(require 'yasnippet-snippets)
#+end_src

As per the [[package-refresh-contents][instructions]] I'm configuring melpa archive repositories. After that the command `package-refresh-contents` must be ran to be able to pull updates from it:

- `M-x package-refresh-contents`
- `M-x package-install yasnippet-snippets`

In the code above I'm actually requiring the package via lisp, which should install and load it.

There's an additional package with extra snippets maintained by the Doom Emacs' github organization: [[https://github.com/doomemacs/snippets][doomemacs/snippets]]

Tip: Use M-x yas-describe-tables to see the list of snippets and edit them.

* Custom packages
This section contains custom packages and package configurations. Most of the configurations here are copy/pasted from the package repositories README.md or other sources. I added attribution/source wherever possible.
** blamer
This package adds a blame legend besides the current line in version-controlled files.

It's somewhat handy but at the same time I can't see how I can jump to the diff for that blame, so I can't make it fully useful to me.
Another small annoyance I found is that when I switched to a literate configuration format (i.e. use org files) the blamer shows up.
The problem is with org files you got line-wrap. Since I use splits (treemacs | vsplit | vsplit) the blamer packages causes text reflow with the line wrap.
#+begin_src emacs-lisp
(use-package blamer
  :bind (("s-i" . blamer-show-commit-info))
  :defer 20
  :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70)
    (blamer-max-commit-message-length 100)
  :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                    :background nil
                    :italic t)))
  :config
  (global-blamer-mode 0))
#+end_src

TODO: Find out how to jump to the blame commit.

** better-jumper
Better jump (remember jump list).

#+begin_src emacs-lisp
(use-package better-jumper
  :ensure t
  :config
  (better-jumper-mode +1))
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "C-o") 'better-jumper-jump-backward)
  (define-key evil-motion-state-map (kbd "C-i") 'better-jumper-jump-forward))
#+end_src

Use with C-o to jump out of the last item and C-i to jump in to the next item in the list.

** super-save
Automatically save open buffers on certain events.

Package repository: [[https://github.com/bbatsov/super-save][here]].

#+begin_src emacs-lisp
(use-package super-save
  :ensure t
  :config
  (super-save-mode +1))
#+end_src

* Custom keybindings
- Open dashboard

#+begin_src emacs-lisp
(map! :leader :desc "Open Dashboard" "d" #'+doom-dashboard/open)
#+end_src

- Comment or uncomment region with M-/
#+begin_src emacs-lisp
(map! :ne "M-/" #'comment-or-uncomment-region)
#+end_src

- Switch to buffer
#+begin_src emacs-lisp
(map! "s-b" #'ido-switch-buffer-other-window)
#+end_src

- Toggle treemacs

Toggle treemacs with M-t (tree) and M-ยง (key left hand side of the number 1 and above the tab key).

#+begin_src emacs-lisp
(map! "s-t" #'+treemacs/toggle)
(map! "s-ยง" #'+treemacs/toggle)
#+end_src

- Save buffer

Quickly save buffer with M-s (save).

#+begin_src emacs-lisp
(map! "s-s" #'save-buffer)
#+end_src

- Search project

Search project's contents with M-f (find). Replaces Go To Line.

#+begin_src emacs-lisp
(map! "s-f" #'+default/search-project)
#+end_src

- Find file

M-p: find file in project, also SPC SPC.

#+begin_src emacs-lisp
(map! "s-p" #'projectile-find-file)
#+end_src
* Version control
** Magit
Configure user and email address:
#+begin_src bash :tangle no
git config --local user.email "des@riseup.net"
git config --local user.name "DC*"
#+end_src

This configuration applies to the repository the command is running on (--local). You can apply global (i.e. to all repositories) replacing --lcoal with the flag --global.
* Project management
** projectile
#+begin_src emacs-lisp
(after! projectile
   (setq
        projectile-project-search-path '("~/sys-vagrant/code/")
   )
)

#+end_src

** treemacs

Enable treemacs and never move to treemacs with other-window:

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :config
  (setq treemacs-is-never-other-window t))
#+end_src

Ensure treemacs-projectile integration:

#+begin_src emacs-lisp
(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)
#+end_src

Ensure treemacs-magit integration:

#+begin_src emacs-lisp
(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

#+end_src

Ensure treemacs-persp integration"

#+begin_src emacs-lisp
(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+end_src

* Files
- Allow deleting files in OSX. Source: [[https://emacs.stackexchange.com/a/15012][Emacs' StackExchange]]

#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
(setq trash-directory "~/.Trash")
#+end_src

*Also required*: Go to Settings -> Security & Privacy -> Privacy -> Automation and Allow Emacs -> Finder. Source: [[https://ajar.freshdesk.com/support/solutions/articles/26000045119-install-error-not-authorized-to-send-apple-events-to-system-events-][freshdesk.com]]

- Archive entries in sub-directory. Source: [[https://emacs.stackexchange.com/a/25020][Emacs' StackExchange]]

#+begin_src emacs-lisp
(setq org-archive-location (concat "archive/archive-"
                                   (format-time-string "%Y%m" (current-time)) ".org_archive::"))
#+end_src

* Org/Agenda
** org-log-repeat

Disable log lines on repeat tasks.

#+begin_src emacs-lisp
(use-package org
  :config
    (setq org-log-repeat nil)
)
#+end_src

* UI
** doom-modeline-word-count

Add word count to status/modeline. Useful for org documents and writing in general.

#+begin_src emacs-lisp
(setq doom-modeline-enable-word-count t)
#+end_src

** git-gutter

Show git gutter for unsaved changes, source: [[https://github.com/doomemacs/doomemacs/issues/2377#issuecomment-576117218][github comment]].

#+begin_src emacs-lisp
(after! git-gutter
  (setq git-gutter:update-interval 0.5))
#+end_src

** center-isearch

source: [[https://www.reddit.com/r/emacs/comments/6ewd0h/comment/dieb3dc/?utm_source=share&utm_medium=web2x&context=3][reddit comment]].

#+begin_src emacs-lisp
(advice-add 'evil-ex-search-next :after
            (lambda (&rest x) (evil-scroll-line-to-center (line-number-at-pos))))
(advice-add 'evil-ex-search-previous :after
            (lambda (&rest x) (evil-scroll-line-to-center (line-number-at-pos))))
#+end_src

** centered-cursor-mode

source: https://github.com/andre-r/centered-cursor-mode.el

#+begin_src emacs-lisp
(use-package centered-cursor-mode
  :demand
  :config
  ;; Optional, enables centered-cursor-mode in all buffers.
  (global-centered-cursor-mode))
#+end_src

** vertico-posframe

Ctrl+P / command launcher-like for M-x.

#+begin_src emacs-lisp
(use-package vertico-posframe
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-border-width 8
        vertico-posframe-width 120
        vertico-posframe-height 20
        vertico-posframe-min-height 10
        vertico-posframe-parameters
        '((left-fringe . 5)
          (right-fringe . 5)))
  )
#+end_src

** spatial-navigate

source: https://github.com/emacs-lsp/lsp-treemacs/issues/89

#+begin_src emacs-lisp
(use-package spatial-navigate
  :after (lsp-treemacs)
  :ensure t)
#+end_src

#+begin_src emacs-lisp
;; (with-eval-after-load 'lsp-treemacs
;;   (doom-themes-treemacs-config))
;;     (define-keyevil-normal-state-map (kbd "C-k") 'spatial-navigate-backward-vertical-box)
;;     (define-key evil-normal-state-map (kbd "C-j") 'spatial-navigate-forward-vertical-box)
;;     (define-key evil-normal-state-map (kbd "C-h") 'spatial-navigate-backward-horizontal-box)
;;     (define-key evil-normal-state-map (kbd "C-l") 'spatial-navigate-forward-horizontal-box)
;;     (define-key evil-insert-state-map (kbd "C-k") 'spatial-navigate-backward-vertical-bar)
;;     (define-key evil-insert-state-map (kbd "C-j") 'spatial-navigate-forward-vertical-bar)
;;     (define-key evil-insert-state-map (kbd "C-h") 'spatial-navigate-backward-horizontal-bar)
    ;; (define-key evil-insert-state-map (kbd "C-l") 'spatial-navigate-forward-horizontal-bar)
#+end_src
