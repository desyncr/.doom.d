#+title: Doom Emacs > Keybindings
#+language: en
#+property: header-args :tangle ../.elisp/keybindings.el

#+attr_html: :style margin-left: auto; margin-right: auto;
#+attr_org: :width 800
[[../resources/keybindings-cheatsheet.png]]

* General
Explicitly define the Mac OS modifiers:
#+begin_src emacs-lisp
(setq mac-command-modifier 'meta) ; make cmd key do Meta
(setq mac-option-modifier 'super) ; make opt key do Super
(setq mac-right-option-modifier  'control)
(setq mac-pass-control-to-system nil)
(setq mac-control-modifier 'control) ; make Control key do Control
#+end_src
Source: [[http://xahlee.info/emacs/emacs/emacs_hyper_super_keys.html][here]].

#+begin_src emacs-lisp
(setq confirm-kill-emacs nil)
#+end_src

Shortcut for opening the Doom's dashboard:
#+begin_src emacs-lisp
(map! :leader :desc "Doom Dashboard" "d" #'+doom-dashboard/open)
#+end_src

Selecting (marking) whole buffer:

#+begin_src emacs-lisp
(map! :desc "Mark whole buffer" "C-a" #'mark-whole-buffer)
#+end_src

* Navigation and files
** TODO Navigation
[[kbd:][M-p]]: find file in project. Prefer consult for everything:
|------------+-----------------------------|
| Keybinding | Command                     |
|------------+-----------------------------|
| M-p        | consult-projectile-project  |
| M-a        | consult-projectile-anything |
| SPC SPC    | consult-bookmark            |
|------------+-----------------------------|
| Buffers    |                             |
|------------+-----------------------------|
| M-b        | consult-project-buffer      |
| M-B        | consult-buffer              |
|------------+-----------------------------|

#+begin_src emacs-lisp
(map! "M-p" #'consult-projectile-project)
(map! "M-a" #'consult-projectile-anything)

(map! :leader "SPC" 'consult-bookmark)
#+end_src

Find buffers:
#+begin_src emacs-lisp
(map! "M-b" #'consult-project-buffer)
(map! "M-B" #'consult-buffer)
#+end_src

** Search
I often navigate files by jumping into the specific section I want to work with, rather than scrolling to the section. For this I use the following approach:
1. I locate the file I'm working with via =consult-projectile-project= [[kbd:][M-p]]
2. I jump to the specific section via =+default/search-buffer= [[kbd:][M-f]]

For the first point =consult-projectile-project= [[kbd:][M-p]] let's me jump straight into any file withing a given project. When I'm not in a project I use =consult-projectile-anything= [[kbd:][M-a]] which does a broader search within buffers, bookmarks, known projects, recent files and so on.

Finally I can jump into the section I'm looking for via =+default/search-buffer=. This command, integrated with =consult= gives me in buffer narrowing.
Additionally, when working with structured files -most of the time- =me/consult-imenu-maybe-lsp= [[kbd:][M-m]] let's me jump into any section via title (or in case of =prog-mode=, function name).

|------------+----------------------------+-------------------------------------|
| Keybinding | Command                    | Description                         |
|------------+----------------------------+-------------------------------------|
| M-f        | +default/search-buffer     | Narrows content via consult         |
| M-F        | +default/search-project    | Search content via consult (buffer) |
| M-m        | me/consult-imenu-maybe-lsp | Narrows outline via lsp or imenu    |
| \/         | +default/search-buffer     | Alias for M-f                       |
|------------+----------------------------+-------------------------------------|

Search buffer via =+default/search-buffer= [[kbd:][M-f]], this command integrated with =consult= gives you in buffer narrowing:

#+begin_src emacs-lisp
(map! "M-f" #'+default/search-buffer)
(map! "M-F" '+default/search-project)
#+end_src

Use =me/consult-imenu-maybe-lsp= [[kbd:][M-m]] for jump into a menu item (section in the buffer) via =lsp-mode= or =imenu=. The interactive command checks if =lsp-mode= is active and uses =consult-lsp-file-symbols=, otherwise it uses =consult-imenu=.

As a former vim user I'm used to these keys for searching within a buffer. So I'm mapping them to the same commands as =+default/search-buffer= [[kbd:][M-f]]:

#+begin_src emacs-lisp
(map! :ne "/" '+default/search-buffer)
(map! :ne "?" '+default/search-project)
#+end_src

*Note*: =+default/search-buffer= [[kbd:][M-f]] supports multiple search and ordering functionalities, such as =orderless=, =grep= etc. Default =evil-ex-search-forward= and such not so much. For this reason searches with =+default/search-buffer= will not work /entirely/ using [[kbd:][n]] and [[kbd:][N]].

** TODO Movements
|------------+--------------------------------------------|
| Key        | Movement                                   |
|------------+--------------------------------------------|
| h, j, k, l | Left, Up, Down, Right                      |
| 0, $, £    | Column 0, end of line, beginning line      |
| w, b       | Forward word, backward word                |
| s, S       | Evil search forward, backward              |
| f          | Avy go to any char                         |
| M-k, M-j   | Page up, down                              |
| M-l        | Go to line (prog mode)                     |
| C-o        | Go back to previous position               |
| C-i        | Go forward from a jump back                |
| C-l        | Centre content in the middle of the screen |
|------------+--------------------------------------------|

Search in buffer:

#+begin_src emacs-lisp
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)
(with-eval-after-load 'evil-maps
  (define-key evil-normal-state-map (kbd "s") 'evil-ex-search-forward)
  (define-key evil-normal-state-map (kbd "S") 'evil-ex-search-backward))
#+end_src

Page up / down:
#+begin_src emacs-lisp
(map! "M-k" 'evil-scroll-up)
(map! "M-j" 'evil-scroll-down)
#+end_src

#+begin_src emacs-lisp
(after! evil-org
  (define-key evil-org-mode-map (kbd "<normal-state> M-k") 'evil-scroll-up)
  (define-key evil-org-mode-map (kbd "<normal-state> M-j") 'evil-scroll-down))
#+end_src
The ~after!~  block makes sure =M-j= and =M-k= are bound correctly on org mode.

#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  ;(define-key evil-normal-state-map (kbd "W") 'evil-backward-word-begin)
  (define-key evil-normal-state-map (kbd "£") 'evil-first-non-blank))
#+end_src

Note: by default ~^~ is bound to =evil-first-non-black=, but for me it's in an awkward position.

* TODO Windows
 |------------------+----------------------------------|
 | Keybinding       | Action                           |
 |------------------+----------------------------------|
 | M-\, M--         | Split vertically, horizontally   |
 | SPC w -, SPC w \ | Split vertically, horizontally   |
 | M-H, M-L         | Move to window left, right       |
 | M-w              | Delete window                    |
 | SPC w i          | Ideal distribution               |
 | SPC w =          | Balance windows                  |
 | SPC w <, >       | Increase, decrease window width  |
 | SPC w h, j, k, l | Switch to h, j, k, l window      |
 | SPC w H, J, K, L | Move window to h, j, k, l window |
 |------------------+----------------------------------|

I don't like the default ~SPC w s~ and ~SPC w v~ keybindings. So for quickly creating split windows I created the following keybindings:

#+begin_src emacs-lisp
(map! "M-\\" 'evil-window-vsplit)
(map! :leader :desc "Split vertical window" "w \\" #'evil-window-vsplit)
(map! "M--" 'evil-window-split)
(map! :leader :desc "Split horizontal window" "w -" #'evil-window-split)
#+end_src

Next/previous window:

#+begin_src emacs-lisp
(map! "M-L" 'next-window-any-frame)
(map! "M-H" 'previous-window-any-frame)
(after! evil-org
  (define-key evil-org-mode-map (kbd "<normal-state> M-L") 'next-window-any-frame)
  (define-key evil-org-mode-map (kbd "<normal-state> M-H") 'previous-window-any-frame))
#+end_src

Use =M-w= to delete window or workspace (last window is preserved):

#+begin_src emacs-lisp
(map! "M-w" 'delete-window)
#+end_src
* TODO Coding
 |------------+-------------------------------|
 | Keybinding | Action                        |
 |------------+-------------------------------|
 | M-s        | Save current buffer           |
 | M-g        | Go to definition              |
 | M-G        | Search references             |
 | M-C-g      | Go to definition other window |
 | M-., M-,   | Go to last change, reverse    |
 | M-<, M->   | Go to previous, next hunk     |
 | M-/        | Nerd commenter                |
 | M-y        | Yank from kill ring           |
 | M-i        | Consult yasnippet             |
 | M-K, M-J   | Move text up, down            |
 |------------+-------------------------------|

Quickly save buffer with ~M-s~ (save):

#+begin_src emacs-lisp
(map! "M-s" #'save-buffer)
#+end_src

Go to definition and go to definition other window:

#+begin_src emacs-lisp
(map! "M-g" #'xref-find-definitions)
(map! "M-G" #'lsp-find-references)
(map! "M-C-G" #'xref-find-definitions-other-window)
#+end_src

=g d= changes my context when I just want to peek at the definition of a method. So quickly jumping in other-window work just fine for me.

Go to last change:

#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-normal-state-map (kbd "M-,") 'goto-last-change-reverse)
  (define-key evil-normal-state-map (kbd "M-.") 'goto-last-change))
#+end_src

Go to line:

#+begin_src emacs-lisp
(map! :ne "M-l" #'consult-goto-line)
#+end_src

New empty buffer:
#+begin_src emacs-lisp
(map! :ne "M-n" #'evil-buffer-new)
#+end_src

Comment or uncomment region:
#+begin_src emacs-lisp
(map! :ne "M-/" 'evilnc-comment-or-uncomment-lines)
#+end_src

Support yanking/killing via =M-v=, =M-c=:

#+begin_src emacs-lisp
(map! (:when IS-MAC (:map general-override-mode-map :gi :desc "Paste from clipboard" "M-v" 'yank)))
(map! :desc "Copy into clipboard" "M-c" 'copy-region-as-kill)
#+end_src
Source: https://github.com/doomemacs/doomemacs/issues/906#issuecomment-455279422

Yank from kill ring:

#+begin_src emacs-lisp
(map! :ne (kbd "M-y") 'consult-yank-from-kill-ring)
#+end_src

Visually selects the paragraph. Execute multiple times to expand the selection or move the cursor:

#+begin_src emacs-lisp
(map! :leader :desc "Visually mark paragraph" "v p" 'er/mark-paragraph)
(map! :leader :desc "Visually mark word" "v w" 'er/mark-word)
#+end_src
Use ~SPC v p~ to *v*isual select a *p*aragraph and ~SPC v w~ to select a word under cursor.

Worth checking out [[https://www.johndcook.com/blog/2017/08/09/selecting-things-in-emacs/][this]] article.

Keybindings for marking up in org mode:

#+begin_src emacs-lisp
(defun me/emphasize-word-or-selection (emphasis)
  (interactive)
  (if (evil-visual-state-p)
      (org-emphasize emphasis)
    (er/mark-word))
  (org-emphasize emphasis))
#+end_src

#+begin_src emacs-lisp
(general-define-key :states '(visual normal insert) :keymaps 'org-mode-map
                    "C-M-b" (lambda () (interactive) (me/emphasize-word-or-selection ?\*)) ;; bold
                    "C-M-i" (lambda () (interactive) (me/emphasize-word-or-selection ?\/)) ;; italics
                    "C-M-e" (lambda () (interactive) (me/emphasize-word-or-selection ?\=))) ;; code
#+end_src

Source: https://emacs.stackexchange.com/a/63881

Triggers consult posframe to select a yasnippet. It also previsualies it in the buffer:

#+begin_src emacs-lisp
(map! "M-i" #'consult-yasnippet)
#+end_src

There's also =SPC i s= keybinding which doesn't uses consult.

Inserts a link for either the selected text or the current word under cursor.If there is a visual selection, inserts an Org-mode link with the selected text as the description.
Otherwise, selects the current word and inserts an Org-mode link with the selected word as the description.
The cursor will be positioned inside the link after it is inserted.

#+begin_src emacs-lisp
(defun me/link-word-or-selection ()
    (interactive)
    (if (evil-visual-state-p) ; Check if in visual state (i.e., text is selected)
        (org-insert-link)     ; Insert Org-mode link with selected text as description
    (er/mark-word))         ; Select current word
    (org-insert-link)         ; Insert Org-mode link with selected text/word as description
)
#+end_src

This function allows the user to insert an Org-mode link with either the selected text or the current word under the cursor as the description. If there is a visual selection, the selected text will be used as the link description. If there is no selection, the current word under the cursor will be selected and used as the link description.

The cursor will be positioned inside the link after it is inserted. This function is interactive and can be bound to a key binding for quick access.

#+begin_src emacs-lisp
(after! evil-org
  (define-key evil-org-mode-map (kbd "C-M-l") 'me/link-word-or-selection))
#+end_src

The =move-text= package is a minor mode that allows users to move lines or regions of text up or down within a buffer using simple keybindings.

Once the package is installed and enabled, users can move a single line up or down using the following keybindings:

- =M-up= or =C-S-up=: Move the current line or the region of text containing the cursor up by one line.
- =M-down= or =C-S-down=: Move the current line or the region of text containing the cursor down by one line.

The package also provides keybindings for moving a region of text up or down:

- =C-M-up=: Move the region of text containing the cursor up by one line.
- =C-M-down=: Move the region of text containing the cursor down by one line.

Additionally, the package provides the =move-text-default-bindings=  function, which can be used to bind the above keybindings to a different keymap. For example, to bind the =move-text= commands to the =C-c m= prefix keymap, you could add the following to your Emacs configuration file:

#+begin_example elisp
(require 'move-text)
(define-key my-prefix-map (kbd "m u") 'move-text-up)
(define-key my-prefix-map (kbd "m d") 'move-text-down)
(define-key my-prefix-map (kbd "m U") 'move-text-region-up)
(define-key my-prefix-map (kbd "m D") 'move-text-region-down)
#+end_example

With these bindings, you can move text up or down within a buffer by pressing =C-c m u= or =C-c m d=, respectively. To move a region of text up or down, select the text and press =C-c m U= or =C-c m D=, respectively.

The move-text package is useful for quickly rearranging lines or regions of code within a buffer, making it a useful tool for code editing and refactoring.

#+begin_src emacs-lisp
(use-package move-text
  :config
  (map! "C-M-k" 'move-text-up)
  (map! "C-M-j" 'move-text-down)
  (after! evil-org
    (define-key evil-org-mode-map (kbd "<visual-state> C-M-k") 'move-text-up)
    (define-key evil-org-mode-map (kbd "<visual-state> C-M-j") 'move-text-down)
    (define-key evil-org-mode-map (kbd "<normal-state> C-M-k") 'move-text-up)
    (define-key evil-org-mode-map (kbd "<normal-state> C-M-j") 'move-text-down))
  )
#+end_src

* TODO Tools
 |------------+--------------------------|
 | Keybinding | Action                   |
 |------------+--------------------------|
 | M-;        | Execute extended command |
 | M-T        | Toggle vterm popup       |
 | M-r        | Open ranger              |
 | M-t        | Neotree toggle           |
 | M-:        | Toggle ielm popup        |
 |------------+--------------------------|
 | M-e        | Eval line or buffer      |
 | M-E        | Edit src block           |
 |------------+--------------------------|

Treemacs toggle, vterm toggle and Ranger:

#+begin_src emacs-lisp
(map! "M-r" :desc "Open ranger" #'ranger)
(map! "M-t" :desc "Toggle Treemacs" #'+treemacs/toggle)
(map! "M-T" :desc "Toggle vterm" '+vterm/toggle)
#+end_src

Setting up this keybinding for the "command palette" and =ielm=:

#+begin_src emacs-lisp
(map! "M-;" :desc "Execute command" 'execute-extended-command)
(map! "M-:" :desc "Toggle ielm popup" 'ielm)
#+end_src

Evaluate line or region and edit source block in capture buffer:

#+begin_src emacs-lisp
(map! "M-e" :desc "Eval line or region" #'+eval/line-or-region)
(map! "C-M-x" :desc "Eval block or region" '+eval/buffer-or-region)
(map! "M-E" :desc "Edit src block" 'org-edit-src-code)
#+end_src

Install packages:

#+begin_src emacs-lisp
(map! :leader :desc "Install package" "h P" #'package-install)
#+end_src

* Mad scientist mode
These tweaks down below aim to improve my over all work with Evil mode keybindings. Note that these tweaks are highly optimised for _my_ personal use (and miss use) of Evil mode.

#+begin_quote
Disclaimer: I'm trying these settings out and figuring out exactly what's my best workflow with them. Plus a period of getting used to it and storing this in muscle memory. So, don't use this.
#+end_quote

Note that I'm configuring (via OS settings) CapsLock to ESC.

I'm currently using a inverted-L type keyboard. For me the distance between the row keys and the enter key is too much. As a workaround for these type of keyboards I'm remapping these keys:

#+attr_html: :alt  :align left :class img
[[../resources/remappings.png][Mad scientist remappings]]


#+begin_src emacs-lisp
(define-key key-translation-map (kbd ":") (kbd "<RET>"))
(define-key key-translation-map (kbd ";") (kbd "<RET>"))

(define-key key-translation-map (kbd "'") (kbd ";")) ; double quotes is colon (S-; is colon)
(define-key key-translation-map (kbd "\"") (kbd ":")) ; single quote is semi colon

(define-key key-translation-map (kbd "|") (kbd "\"")) ; pipe is double quotes ""
(define-key key-translation-map (kbd "\\") (kbd "'")) ; backslash is single quote ''

(define-key key-translation-map (kbd "C-|") (kbd "|")) ; C-pipe is pipe |
(define-key key-translation-map (kbd "C-\\") (kbd "\\")) ; C-backslash is backslash \
#+end_src

#+begin_src emacs-lisp
(define-key key-translation-map (kbd "[") (kbd "<DEL>"))
(define-key key-translation-map (kbd "{") (kbd "<DEL>"))

(define-key key-translation-map (kbd "]") (kbd "["))
(define-key key-translation-map (kbd "}") (kbd "{"))

(define-key key-translation-map (kbd "C-]") (kbd "["))
(define-key key-translation-map (kbd "C-}") (kbd "{"))
#+end_src

The result should be less strain from moving the hand to reach the enter key repeatedly.

Quick access to append-line and first-non-black functions:

I notified that I make quite a usage of these two (in one way or another) so I should have quick access to it.

I generally use 'i' for inserting and 'A' for appending at the end of the line.

#+begin_src emacs-lisp
;(define-key evil-normal-state-map (kbd "A") 'evil-append)
;(define-key evil-normal-state-map (kbd "a") 'evil-append-line)
#+end_src

Mapping =0= (or =)=) to jump to first non blank character, which is quite useful for programmer mode with indented code.

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd ")") 'evil-first-non-blank)
(define-key evil-visual-state-map (kbd ")") 'evil-first-non-blank)
;(define-key evil-normal-state-map (kbd "0") (lambda () (interactive) (evil-goto-column 0))) ;; also C-u
;(define-key evil-visual-state-map (kbd "0") (lambda () (interactive) (evil-goto-column 0))) ;; also C-u
;
;(define-key evil-normal-state-map (kbd "3") 'evil-ex-search-word-backward)

; Note: Doesn't work with smart parens / electric
;(define-key evil-insert-state-map (kbd "0") (lambda () (interactive) (insert ")")))
;(define-key evil-insert-state-map (kbd ")") (lambda () (interactive) (insert "0")))
#+end_src

Avoid use of hard to reach =DEL= key. Here I'm replacing this key usage with a bit more accessible =M-u= and =M-U=:

#+begin_src emacs-lisp
(map! "M-u" (kbd "<DEL>"))
(map! "M-U" 'evil-delete-backward-word) ;; also C-u
;; src: https://stackoverflow.com/a/9953097
#+end_src

#+begin_src emacs-lisp
;(with-eval-after-load 'evil-maps
;  (define-key evil-insert-state-map (kbd "M-o") '(lambda () (interactive) (kbd "<RET>")))
;  (define-key evil-insert-state-map (kbd "M-O") 'evil-open-above))
#+end_src

PHP specific typing improvements:

#+begin_src emacs-lisp
;(with-eval-after-load 'php-mode
;    (define-key php-mode-map (kbd "-") (lambda () (interactive) (insert "->")))
;    (define-key key-translation-map (kbd "4") (kbd "$"))
;    (define-key key-translation-map (kbd "$") (kbd "4"))
;)
#+end_src
