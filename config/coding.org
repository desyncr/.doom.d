#+title: Doom Emacs > Coding
#+language: en
#+property: header-args :tangle ../.elisp/coding.el :cache yes :results silent

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
#+end_src

* Smart parens
The =smartparens= package is a minor mode that provides advanced matching and manipulation of paired delimiters, such as parentheses, brackets, and quotes. The package offers various features to make working with pairs of delimiters more efficient and intuitive.

One of the main features of =smartparens= is its ability to automatically insert paired delimiters as the user types. For example, if the user types an open parenthesis, =smartparens= will automatically insert a closing parenthesis and place the cursor between the two. This behaviour can be customised for different types of delimiters.

The package also provides advanced commands for manipulating paired delimiters. For example, the =sp-kill-sexp= command can be used to delete the entire expression enclosed by the nearest pair of delimiters, while the =sp-join-sexp= command can be used to join the current expression with the following one.

In addition, =smartparens= provides customisable highlighting of paired delimiters, making it easy to see which pairs of delimiters correspond to each other. The package also provides functions for navigating between pairs of delimiters, as well as for selecting and manipulating nested expressions.

#+begin_src emacs-lisp
(after! smartparens
  (smartparens-global-mode -1))
#+end_src

Source: [[https://github.com/doomemacs/doomemacs/blob/develop/docs/faq.org#how-to-disable-smartparensautomatic-parentheses-completion][Doom emacs FAQ]].

* Expand region
=expand-region= is an Emacs package that provides a convenient way to incrementally expand the region of text being selected. With each successive invocation of the =expand-region= command, the selected region is extended to the next logical unit of code, such as a word, expression, or entire function. The =expand-region= package can save time and effort by simplifying the selection of code for various operations.

The =expand-region= package works by defining a command that extends the region of text being selected. The default key binding for the command is [[kbd:][C-\=]], which can be customised as per user preference. Each time the command is invoked, the region expands to the next logical unit of code, such as a word, expression, or entire function. The =expand-region= package also includes commands to contract the region, shrink it, or reset it to its original state.

Here I'm binding [[kbd:][M-\=]] to =er/expand-region=:

#+begin_src emacs-lisp
(use-package expand-region
  :bind ("M-=" . er/expand-region))
#+end_src

See mention [[https://takeonrules.com/2020/10/18/why-i-chose-emacs-as-my-new-text-editor/][here]].

* Flycheck
Flycheck is a package that provides on-the-fly syntax checking for programming languages. It integrates with various programming language-specific syntax checkers and linters to provide real-time feedback on code errors and warnings. The package supports many programming languages and can be customised to suit individual preferences.

Most classes/php files I'm working with are quite large and cause a large number of errors to popup. I'm topping up the error threshold to avoid a warning during start up:

#+begin_src emacs-lisp
(setq flycheck-checker-error-threshold 100)
#+end_src

Most projects I work with are somewhat following the =PSR12= standard, so let's configure Flycheck to respect that:

#+begin_src emacs-lisp
(setq flycheck-phpcs-standard "PSR12"
      flycheck-phpstan-executable "/Users/dario/.composer/vendor/bin/phpstan"
      flycheck-php-phpcs-executable "/usr/local/bin/phpcs"
      flycheck-check-syntax-automatically '(save mode-enable))

(defun my-php-mode-setup ()
    "My PHP-mode hook."
    (require 'flycheck-phpstan)
    (php-enable-psr2-coding-style)
    (setq php-project-root 'git
        phpstan-executable "/Users/dario/.composer/vendor/bin/phpstan"
        phpstan-working-dir "/Users/dario/code/exads-core"
        phpstan-config-file "/Users/dario/code/exads-core/phpstan.local.neon"
        phpstan-memory-limit "1G"
        phpstan-level 4)
    (flycheck-mode t))

(add-hook 'php-mode-hook 'my-php-mode-setup)
#+end_src

* LSP
LSP (Language Server Protocol) is a package that provides integration with language servers, allowing for advanced code analysis, completion, and navigation features. With LSP, Emacs can connect to language servers provided by various programming languages and provide real-time feedback on code errors, hints, and suggestions.

I'm working on a large series of interrelated projects which work well under the same directory structure (=code/{project1, project2, project3}=).
The downside is that this causes LSP to complain about the large number of files and file descriptors it uses.

So I'm forced to top up the default threshold via this variable:

#+begin_src emacs-lisp
(setq lsp-file-watch-threshold 5000)
#+end_src

Configure LSP to ignore specific directories or files when watching for changes in project files. Specifically, the =with-eval-after-load= macro to ensure that these configurations are only applied after =lsp-mode= is loaded. It then uses the =add-to-list= function to add a regular expression pattern to the =lsp-file-watch-ignored-directories= or =lsp-file-watch-ignored-files= lists. These lists are used by LSP to determine which files to watch and which to ignore.

#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]vendor\\'")
  ;; or
  (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\.my-files\\'"))
#+end_src

#+begin_src emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :defer t)
#+end_src

| Option                                              | Description                                                          |
|-----------------------------------------------------+----------------------------------------------------------------------|
| =lsp-idle-delay=                                      | Delay before activating the LSP server.                              |
| =company-idle-delay=                                  | Delay before showing Company completion.                             |
| =company-tooltip-idle-delay=                          | Delay in seconds until tooltip is shown.                            |
| =gc-cons-thresh=                                      | Value at which Emacs garbage collection is triggered.                |
| =company-minimum-prefix-length=                       | Minimum number of characters required to trigger Company completion. |
| =company-tooltip-limit=                               | Maximum number of candidates to show in the Company tooltip.         |
| =company-tooltip-minimum-width=                       | Minimum width of the Company tooltip.                                |
| =company-tooltip-maximum-width=                       | Maximum width of the Company tooltip.                                |
| =lsp-ui-doc-max-width=                                | Maximum width of the LSP documentation.                              |
| =lsp-ui-doc-max-height=                               | Maximum height of the LSP documentation.                             |
| =lsp-ui-doc-include-signature=                        | Whether to include function signatures in the LSP documentation.     |
| =lsp-ui-doc-enable=                                   | Whether to enable the LSP documentation.                             |
| =lsp-signature-render-documentation=                  | Whether to render documentation in LSP signatures.                   |
| =lsp-signature-auto-activate=                         | Whether to automatically activate LSP signatures.                    |
| =lsp-enable-snippet=                                  | Whether to enable LSP snippets.                                      |
| =company-lsp-enable-snippet=                          | Whether to enable Company LSP snippets.                              |
| =lsp-enable-symbol-highlighting=                      | Whether to enable symbol highlighting in LSP.                        |
| =lsp-enable-links=                                    | Whether to enable links in LSP.                                      |
| =lsp-restart=                                         | Restart LSP server.                                                  |
| =lsp-intelephense-completion-trigger-parameter-hints= | Whether to show parameter hints in Intelephense completion.          |
| =lsp-signature-function=                              | Function used to create the LSP signature.                           |


#+begin_src emacs-lisp
(setq lsp-idle-delay 0.0
      company-idle-delay 0.0
      company-tooltip-idle-delay 0.0
      gc-cons-threshold (* 100 1024 1024)
      company-minimum-prefix-length 0
      company-tooltip-limit 10
      company-tooltip-minimum-width 100
      company-tooltip-maximum-width 200
      lsp-ui-doc-max-width 150
      lsp-ui-doc-max-height 100
      lsp-ui-doc-include-signature t
      lsp-ui-doc-enable t
      lsp-signature-render-documentation t
      lsp-signature-auto-activate t
      lsp-enable-snippet t
      company-lsp-enable-snippet t
      lsp-enable-symbol-highlighting t
      lsp-enable-links t
      lsp-restart 'auto-restart
      lsp-intelephense-completion-trigger-parameter-hints t
      lsp-signature-function 'lsp-signature-posframe)
(company-box-mode -1)
#+end_src

#+begin_src emacs-lisp
(after! company
  (map! :map company-active-map "<tab>" #'company-complete-selection)
  (map! "M-[" #'+company/complete)
  (map! :map lsp-mode-map "<tab>" #'company-indent-or-complete-common))
;;(map! :i "<tab>" #'company-complete-selection)
;;(map! :map company-active-map "<tab>" #'company-complete-common))
#+end_src

The =lsp-treemacs= package provides an integration between the LSP and the Treemacs file explorer. It allows users to easily navigate and explore the codebase of their project using the Treemacs interface, while also providing quick access to LSP features like code navigation and code actions.

#+begin_src emacs-lisp
(use-package lsp-treemacs :defer t)
#+end_src

#+begin_src emacs-lisp
(setq lsp-headerline-breadcrumb-enable t
      lsp-headerline-breadcrumb-segments '(symbols)
      lsp-headerline-breadcrumb-icons-enable t
      lsp-headerline-breadcrumb-enable-diagnostics nil)
#+end_src

#+begin_src emacs-lisp
(map! "M-G" 'lsp-ui-peek-find-references)
(map! "M-M" 'consult-lsp-symbols)
(map! "M-[" '+company/complete)

(defun me/consult-imenu-maybe-lsp ()
  (interactive)
  (if (bound-and-true-p lsp-mode)
      (consult-lsp-file-symbols t)
    (consult-imenu)))

(map! "M-m" 'me/consult-imenu-maybe-lsp)
(map! "C-f" 'lsp-format-region)

;; lsp doc show
(map! "M-h" 'lsp-ui-doc-show)

;; lsp signature show
(map! "M-H" 'lsp-signature-toggle-full-docs)
#+end_src
* Rainbow delimiters
Rainbow colouring for brackets and other delimiters in prog mode. Package: [[https://elpa.nongnu.org/nongnu/rainbow-delimiters.html][nongnu elpa]].

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

* Yasnippets
The =yasnippet= Emacs package is a highly customisable system for defining and using text snippets. With this package, users can define custom snippets for frequently used code or text, and easily insert them using intuitive shortcuts. The package supports templates with placeholders, tab stops, and multiple fields, making it easy to customise and reuse code snippets in a variety of contexts.

I'm using [[https://github.com/joaotavora/yasnippet][Yasnippets]] package to manage code snippets. As per the instructions:

#+begin_src emacs-lisp
(use-package yasnippet
  :defer t
  :config (yas-global-mode 1))

(defun yas-php-get-class-name-by-file-name ()
  "Return name of class-like construct by `file-name'.
\"class-like\" contains class, trait and interface."
  (file-name-nondirectory
   (file-name-sans-extension (or (buffer-file-name)
                                 (buffer-name (current-buffer))))))
#+end_src

Additionally I'm installing predefined snippets with the package [[The above instructions also setup the package][Yasnippets-snippets]]:

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :defer t)
#+end_src

As per the [[package-refresh-contents][instructions]] I'm configuring MELPA archive repositories. After that the command ~package-refresh-contents~ must be ran to be able to pull updates from it:

- ~M-x package-refresh-contents~
- ~M-x package-install yasnippet-snippets~

In the code above I'm actually requiring the package via lisp, which should install and load it.

There's an additional package with extra snippets maintained by the Doom Emacs' Github organisation: [[https://github.com/doomemacs/snippets][doomemacs/snippets]].
I'm also imported snippets from [[https://github.com/cartolari/yasnippet-vim-snippets][cartolari/yasnippet-vim-snippets]] repository, primarily [[https://github.com/cartolari/yasnippet-vim-snippets/tree/master/snippets/php-mode][php-mode]].

Tip: Use ~M-x yas-describe-tables~ to see the list of snippets and edit them.
Tip: Use =consult-yasnippet= via [[kbd:][M-i]].

* Devdocs
This package somewhat expands on Doom Emacs' [[https://docs.doomemacs.org/latest/modules/tools/lookup/][lookup]] functionality.

The [[kbd:][SPC s o]] opens up documentation for the current symbol under cursor in the default browser. I didn't like to require a browser to navigate documentation as I don't want to leave the code I'm working on to check on something.

Alternatively it can be configured to use ~eww~ instead. Which is way better. But the problem is devdocs require javascript to work correctly (it can work offline, but still requires a browser and javascript enabled).

This package uses devdocs generated documentation (downloads it) and queries it offline, showing it on a separate window/buffer.

#+begin_src emacs-lisp
(use-package devdocs
  :defer t)

(global-set-key (kbd "C-h D") 'devdocs-lookup)
#+end_src

Use ~C-h D~ or ~SPC h D~ to search for the symbol under cursor. Note: The documentation will not be displayed right away, you'll need to press RET on the given symbol.

* Better jumper
The =better-jumper= package provides an enhanced jumping mechanism that allows users to easily move between arbitrary locations in a buffer. The package replaces the built-in Emacs marker ring with a more flexible and configurable jump list that can store multiple jump points and be shared between buffers. This enables users to jump back and forth between locations within a buffer or across multiple buffers, even after performing actions such as searches, replacements, or other modifications that would normally invalidate the marker ring. The package also provides additional commands for navigating the jump list and allows users to customise the behaviour of the jump list to suit their needs.

#+begin_src emacs-lisp
(use-package better-jumper
  :defer t
  :config
    (better-jumper-mode +1))
    (with-eval-after-load 'evil-maps
        (define-key evil-motion-state-map (kbd "C-o") 'better-jumper-jump-backward)
        (define-key evil-motion-state-map (kbd "C-i") 'better-jumper-jump-forward)
)
#+end_src

Use with [[kbd:][C-o]] to jump out of the last item and [[kbd:][C-i ]]to jump in to the next item in the list.

* Avy
Avy is a package that provides quick and efficient navigation within buffers. It allows the user to jump to any visible character in the buffer with just a few keystrokes.

#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map "f" 'avy-goto-char-timer))

(setq avy-timeout-seconds 1
      avy-single-candidate-jump t
      avy-orders-alist '((evil-avy-goto-char-timer . avy-order-closest)))
#+end_src

* Multiple cursors
Doom Emacs supports 2 multi-cursor packages out of the box: doom-package:evil-mc and doom-package:evil-multiedit. These packages can be enabled via doom-module:multiple-cursors module.

The packages approach to multiple cursors is different. [[doom-package:evil-mc]] work similar to other multiple-cursor implementations, that's it: you enable cursors in multiple places. On the other hand [[doom-package:evil-multiedit]] works by regions: you visually select selections and work on them.

By default [[kbd:][M-d]]  and [[kbd:][M-S-d]] creates [[doom-package:evil-multiedit]] sections. Use ~R~ in visual mode to create selections across the whole buffer. Use ~:iedit/REGEX~ to create sections via ex command.

- [[kbd:][M-d]] to iedit the symbol at point. Again to iedit its next match.
- [[kbd:][M-S-d]] to do it backwards.
- [[kbd:][R]] (in visual mode) to iedit all matches of the selection at point in the  buffer.
- Or ~:iedit/REGEX~ to iedit all matches of REGEX.

[[doom-package:evil-mc]] is bounded to [[kbd:][gz ]]prefix keys and has several keybindings.
- [[kbd:][gzz]] to toggle new (frozen) cursors at point.
- [[kbd:][gzt]] to toggle mirroring on and off (or switch to insert mode to activate them).
- [[kbd:][gzA]] to place cursors at the end of each selected line.
- [[kbd:][gzI]] will place them at the beginning.
- There's also the ex command ~:mc/REGEXP/FLAGS~, for laying down cursors by  regex.

I don't like these keybindings so I create these down below to work with [[doom-package:evil-mc]]:

- [[kbd:][C-d]] create cursor and go to next match.
- [[kbd:][C-j]] create cursor and move next line.
- [[kbd:][C-k]] create cursor and move previous line.

#+begin_src emacs-lisp
(global-evil-mc-mode  1)

(with-eval-after-load 'evil-maps
  (global-set-key (kbd "C-d") 'evil-mc-make-and-goto-next-match)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-mc-make-cursor-move-next-line)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-mc-make-cursor-move-prev-line)

  (define-key evil-visual-state-map (kbd "C-d") 'evil-mc-make-and-goto-next-match)
  (define-key evil-normal-state-map (kbd "C-d") 'evil-mc-make-and-goto-next-match))
#+end_src

[[doom-package:evil-multiedit]] seems to be case-insensitive by default, this snippet forces it to be case-sensitive in matches:
#+begin_src emacs-lisp
(defun me/make-evil-multiedit-case-sensitive (fn &rest args)
  (let ((case-fold-search (not iedit-case-sensitive)))
    (apply fn args)))

(advice-add #'evil-multiedit-match-and-next :around #'me/make-evil-multiedit-case-sensitive)
#+end_src

Source: https://github.com/hlissner/evil-multiedit/issues/48#issuecomment-1011418580

* php doc generator

The =php-doc-block= package is used to help insert documentation blocks according to the PHPDoc standard. It provides a customisable template for generating the block and can be configured to include or exclude specific tags as needed.

#+begin_src emacs-lisp
(add-hook 'php-mode-hook
          (lambda ()
            (global-set-key (kbd "<C-tab>") 'php-doc-block)))
#+end_src

* Multiline
Turn a method call from a single line argument list into a multi line one. Example:

#+begin_example php
function example(string $a, int $b, float $c): void
{
    echo "$a : $c / $b";
}

// =>
function example(
    string $a,
    int $b,
    float $c
): void {
    echo "$a : $c / $b";
}
#+end_example

Note: You've to visually select the enclosing ~(~ ~)~ characters, use ~v a (~.

Similarly:

#+begin_example php
$this->method("string", 123, 4.5);

// =>
$this->method(
    "string",
    123,
    4.5
);

#+end_example

Posible improvements:
- Assign to keybinding
- Work on the current line (search next '(' and position there)

#+begin_src emacs-lisp
(defun me/php-call-multiline (b e)
  "Turn oneline php call to multiline."
  (interactive "*r")
  (insert
   (replace-regexp-in-string
    (rx (in "(,)"))
    (lambda (s)
      (pcase (match-string 0 s)
        ("(" "(\n")
        ("," ",\n")
        (")" "\n)")))
    (delete-and-extract-region b e)))
  (indent-region b (point)))
#+end_src

Toggle single line array into multi line and vice-versa, example:

#+begin_example php
$array = [1, 2, 3, 4];
// =>
$array = [
    1,
    2,
    3,
    4];
#+end_example

Not perfect, but it's a start.

#+begin_src emacs-lisp
(defun me/php-array-multiline (b e)
  "Turn oneline php array to multiline."
  (interactive "*r")
  (insert
   (replace-regexp-in-string
    (rx (in "[,]"))
    (lambda (s)
      (pcase (match-string 0 s)
        ("[" "[\n")
        ("," ",\n")
        ("]" "\n]")))
    (delete-and-extract-region b e)))
  (indent-region b (point)))
#+end_src

#+begin_src emacs-lisp
(defun me/php-array-oneline (b e)
  "Turn multiline php array to oneline."
  (interactive "*r")
  (insert
   (replace-regexp-in-string
    "\n\s*"
    ""
    (delete-and-extract-region b e))))
#+end_src

#+begin_src emacs-lisp
(defun me/php-array-toggle (b e)
  "Toggle php array between oneline and multiline."
  (interactive "*r")
  (if (string-match-p "\n" (buffer-substring b e))
      (me/php-array-oneline b e)
    (me/php-array-multiline b e)))
#+end_src

Defining keybinding for toggle command:

#+begin_src emacs-lisp
(map! :desc "Toggle PHP array multiline" "M-C-f" #'me/php-array-toggle)
#+end_src

* Rotate text
The =rotate-text= package provides a convenient way to rotate the text in a buffer by changing the order of the words or phrases. This can be useful for quickly converting a list of items from one format to another, or for generating permutations of text.

To enable a set of items to cycle through globally:
#+begin_src emacs-lisp
(after! rotate-text
  (add-to-list 'rotate-text-words '("t" "nil")))
#+end_src

To add a sequence to a specific mode:

#+begin_src emacs-lisp
(set-rotate-patterns! 'prog-mode
    :words '(("t" "nil")))
#+end_src

When configuring a sequence of words or symbols that should be rotated through, it is important that all items are all lower case. The casing will be determined by the item that initiated the rotation. For example, ~Small~ will be replaced with ~Medium~ and ~SMALL~ will be replaced with ~MEDIUM~ using the example described above.

Example configuration:

#+begin_example elisp
;; Define custom rotations for words and phrases
(setq rotate-text-words
      '(("yes" "Yes" "YES" "yea")
        ("no" "No" "NO" "nah")))

;; Customize the separator in the tooltip
(setq rotate-text-separator " -> ")

;; Highlight the original word in the buffer
(setq rotate-text-font-lock-keywords
      `((,(rx word-start (or "yes" "no") word-end)
       (0 '(face bold)))))

;; Bind the `rotate-text` command to a key
(global-set-key (kbd "C-c r") 'rotate-text)
#+end_example

With these configurations, when you call `rotate-text` on the word "yes", the tooltip will show "yes -> Yes -> YES -> yea", and the word "yes" in the buffer will be highlighted in bold.

* Evil mode

This module provides a couple extra text objects, along with the built-in ones.
For posterity, here are the built-in ones:

- [[kbd:][w W]] words
- [[kbd:][s]] sentences
- [[kbd:][p]] paragraphs
- [[kbd:][b]] parenthesized blocks
- [[kbd:][b ( ) { } [ ] < >]] braces, parentheses and brackets
- [[kbd:][' " `]] quotes
- [[kbd:][t]] tags
- [[kbd:][o]] symbols

And these are text objects added by this module:

- [[kbd:][a]] C-style function arguments (provided by ~evil-args~)
- [[kbd:][B]] any block delimited by braces, parentheses or brackets (provided by ~evil-textobj-anyblock~)
- [[kbd:][c]] Comments
- [[kbd:][f]] For functions (but relies on the major mode to have sane definitions for ~beginning-of-defun-function~ and ~end-of-defun-function~)
- [[kbd:][g]] The entire buffer
- [[kbd:][i j k]] by indentation ([[kbd:][k]] includes one line above; [[kbd:][j]] includes one line above and below) (provided by ~evil-indent-plus~)
- [[kbd:][q]] For quotes (any kind)
- [[kbd:][u]] For URLs
- [[kbd:][x]] XML attributes (provided by ~exato~)

interesting package to explore: https://github.com/wcsmith/evil-args
