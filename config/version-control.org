#+title: Doom Emacs > Version Control
#+language: en
#+property: header-args :tangle ../.elisp/version-control.el :cache yes :results silent

Often times it's useful to see the local file in the browser, for example to share the exact code you're looking into. =browse-at-remove= does exactly that.

* Git
Configure user and email address:
#+begin_src bash :tangle no
git config --local user.email "des@riseup.net"
git config --local user.name "DC*"
#+end_src

This configuration applies to the repository the command is running on (--local). You can apply global (i.e. to all repositories) replacing --local with the flag --global.

#+begin_src emacs-lisp
(map! "M->" 'git-gutter:next-hunk)
(map! "M-<" 'git-gutter:previous-hunk)
#+end_src

* Magit
[[https://magit.vc/][Magit]] is a deal-breaker type of package for Emacs. It forever changes the way you interact with Git (Goodbye cli!).

#+begin_src emacs-lisp
(after! magit
    (setq git-commit-summary-max-length 100))
#+end_src

Anyway, in the above code setting the commit's summary max length to 100 so I'm not bothered with auto-formattig in commit's title/descriptions.

TODO: Split magit-commit-setup between code (branch prefix) and personal/work notes (custom message).

#+begin_src emacs-lisp
(defun me/magit-commit-setup ()
  (insert (concat (magit-get-current-branch) ": ")))

(add-hook 'git-commit-setup-hook 'me/magit-commit-setup)
#+end_src

#+begin_src emacs-lisp
(map! :leader :desc "Magit push" "g p" #'magit-push-current-to-upstream)
(map! :leader :desc "Magit pull" "g f" #'magit-pull-from-upstream)
(map! :map magit-mode-map :desc "Magit quit" :nvi "M-q" '+magit/quit)
#+end_src

Use [[kbd:][M-q]] or [[kbd:][M-k]] to cancel an "editor", for example, magit commit. Use [[kbd:][M-RET]] to confirm.

#+begin_src emacs-lisp
(use-package with-editor
  :general
  ('normal with-editor-mode-map
   "M-q" 'with-editor-cancel
   "M-k" 'with-editor-cancel
   "M-;" 'with-editor-finish
   "M-RET" 'with-editor-finish)
  ('insert with-editor-mode-map
   "M-q" 'with-editor-cancel
   "M-k" 'with-editor-cancel
   "M-;" 'with-editor-finish
   "M-RET" 'with-editor-finish))
#+end_src


** Magit-todo
https://github.com/alphapapa/magit-todos
#+begin_src emacs-lisp
(after! magit
    (magit-todos-mode))
#+end_src
* Magit quick commit

#+begin_src emacs-lisp
(defun me/magit-stage-commit-push ()
  "Stage, commit, and push all modified files to 'origin'."
  (interactive)
  (if (not (magit-anything-modified-p))
      (message "No modified files to commit.")
    (magit-stage-modified)
    (let* ((timestamp (format-time-string "%Y-%m-%d %H:%M:%S"))
      (commit-msg (concat "Update notes " timestamp)))
      (magit-commit-create (list "-m" commit-msg))
      (magit-push-current-to-upstream "p"))))
#+end_src

This function first checks if there are any modified files using =magit-anything-modified-p=. If there are no modified files, it displays a message. Otherwise, it stages the modified files using =magit-stage-modified=, prompts you for a commit message, creates a commit using =magit-commit-create=, and finally pushes the changes to the "origin" remote using =magit-push-current-to-upstream=.

#+begin_src emacs-lisp
(map! :leader :desc "Magit quick push" "p p" #'me/magit-stage-commit-push)
#+end_src

* Diff-hl
#+begin_src emacs-lisp
(after! diff-hl
  (setq global-diff-hl-mode +1)
  (setq diff-hl-show-hunk-function 'diff-hl-show-hunk-inline-popup))

(map! :leader :desc "Show inline hunk" "g h" #'diff-hl-show-hunk)
#+end_src
