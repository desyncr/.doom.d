#+title: Doom Emacs > Version Control
#+language: en
#+property: header-args :tangle ../.elisp/version-control.el :cache yes :results silent :auto_tangle t

Often times it's useful to see the local file in the browser, for example to share the exact code you're looking into. =browse-at-remove= does exactly that.

* Git
Configure user and email address:
#+begin_src bash :tangle no
git config --local user.email "des@riseup.net"
git config --local user.name "DC*"
#+end_src

This configuration applies to the repository the command is running on (--local). You can apply global (i.e. to all repositories) replacing --local with the flag --global.

#+begin_src emacs-lisp
(map! "M->" 'git-gutter:next-hunk)
(map! "M-<" 'git-gutter:previous-hunk)
#+end_src

* Magit
[[https://magit.vc/][Magit]] is a deal-breaker type of package for Emacs. It forever changes the way you interact with Git (Goodbye cli!).

#+begin_src emacs-lisp
(after! magit
    (setq git-commit-summary-max-length 100))
#+end_src

Anyway, in the above code setting the commit's summary max length to 100 so I'm not bothered with auto-formattig in commit's title/descriptions.

#+begin_src emacs-lisp
(defun me/magit-commit-setup ()
  (insert (concat (magit-get-current-branch) ": ")))

(add-hook 'git-commit-setup-hook 'me/magit-commit-setup)
#+end_src

#+begin_src emacs-lisp
(map! :leader :desc "Magit push" "g p" #'magit-push-current-to-upstream)
(map! :leader :desc "Magit pull" "g f" #'magit-pull-from-upstream)
#+end_src

* Diff-hl
#+begin_src emacs-lisp
(after! diff-hl
  (setq global-diff-hl-mode +1)
  (setq diff-hl-show-hunk-function 'diff-hl-show-hunk-inline-popup))

(map! :leader :desc "Show inline hunk" "g h" #'diff-hl-show-hunk)
#+end_src

* Difftastic
https://tsdh.org/posts/2022-08-01-difftastic-diffing-with-magit.html

#+begin_src emacs-lisp
(defun th/magit--with-difftastic (buffer command)
  "Run COMMAND with GIT_EXTERNAL_DIFF=difft then show result in BUFFER."
  (let ((process-environment
         (cons (concat "GIT_EXTERNAL_DIFF=difft --width="
                       (number-to-string (frame-width)))
               process-environment)))
    ;; Clear the result buffer (we might regenerate a diff, e.g., for
    ;; the current changes in our working directory).
    (with-current-buffer buffer
      (setq buffer-read-only nil)
      (erase-buffer))
    ;; Now spawn a process calling the git COMMAND.
    (make-process
     :name (buffer-name buffer)
     :buffer buffer
     :command command
     ;; Don't query for running processes when emacs is quit.
     :noquery t
     ;; Show the result buffer once the process has finished.
     :sentinel (lambda (proc event)
                 (when (eq (process-status proc) 'exit)
                   (with-current-buffer (process-buffer proc)
                     (goto-char (point-min))
                     (ansi-color-apply-on-region (point-min) (point-max))
                     (setq buffer-read-only t)
                     (view-mode)
                     (end-of-line)
                     ;; difftastic diffs are usually 2-column side-by-side,
                     ;; so ensure our window is wide enough.
                     (let ((width (current-column)))
                       (while (zerop (forward-line 1))
                         (end-of-line)
                         (setq width (max (current-column) width)))
                       ;; Add column size of fringes
                       (setq width (+ width
                                      (fringe-columns 'left)
                                      (fringe-columns 'right)))
                       (goto-char (point-min))
                       (pop-to-buffer
                        (current-buffer)
                        `(;; If the buffer is that wide that splitting the frame in
                          ;; two side-by-side windows would result in less than
                          ;; 80 columns left, ensure it's shown at the bottom.
                          ,(when (> 80 (- (frame-width) width))
                             #'display-buffer-at-bottom)
                          (window-width
                           . ,(min width (frame-width))))))))))))
#+end_src

#+begin_src emacs-lisp
(defun th/magit-show-with-difftastic (rev)
  "Show the result of \"git show REV\" with GIT_EXTERNAL_DIFF=difft."
  (interactive
   (list (or
          ;; If REV is given, just use it.
          (when (boundp 'rev) rev)
          ;; If not invoked with prefix arg, try to guess the REV from
          ;; point's position.
          (and (not current-prefix-arg)
               (or (magit-thing-at-point 'git-revision t)
                   (magit-branch-or-commit-at-point)))
          ;; Otherwise, query the user.
          (magit-read-branch-or-commit "Revision"))))
  (if (not rev)
      (error "No revision specified")
    (th/magit--with-difftastic
     (get-buffer-create (concat "*git show difftastic " rev "*"))
     (list "git" "--no-pager" "show" "--ext-diff" rev))))
#+end_src

#+begin_src emacs-lisp
(defun th/magit-diff-with-difftastic (arg)
  "Show the result of \"git diff ARG\" with GIT_EXTERNAL_DIFF=difft."
  (interactive
   (list (or
          ;; If RANGE is given, just use it.
          (when (boundp 'range) range)
          ;; If prefix arg is given, query the user.
          (and current-prefix-arg
               (magit-diff-read-range-or-commit "Range"))
          ;; Otherwise, auto-guess based on position of point, e.g., based on
          ;; if we are in the Staged or Unstaged section.
          (pcase (magit-diff--dwim)
            ('unmerged (error "unmerged is not yet implemented"))
            ('unstaged nil)
            ('staged "--cached")
            (`(stash . ,value) (error "stash is not yet implemented"))
            (`(commit . ,value) (format "%s^..%s" value value))
            ((and range (pred stringp)) range)
            (_ (magit-diff-read-range-or-commit "Range/Commit"))))))
  (let ((name (concat "*git diff difftastic"
                      (if arg (concat " " arg) "")
                      "*")))
    (th/magit--with-difftastic
     (get-buffer-create name)
     `("git" "--no-pager" "diff" "--ext-diff" ,@(when arg (list arg))))))
#+end_src

#+begin_src emacs-lisp
(after! magit
    (transient-define-prefix th/magit-aux-commands ()
        "My personal auxiliary magit commands."
        ["Auxiliary commands"
        ("d" "Difftastic Diff (dwim)" th/magit-diff-with-difftastic)
        ("s" "Difftastic Show" th/magit-show-with-difftastic)]))
#+end_src

#+begin_src emacs-lisp
(after! magit
    (transient-append-suffix 'magit-dispatch "!"
        '("@" "Custom commands" th/magit-aux-commands))

    (define-key magit-status-mode-map (kbd "@") #'th/magit-aux-commands)
    (define-key magit-status-mode-map (kbd "ESC") #'+magit/quit))
#+end_src
